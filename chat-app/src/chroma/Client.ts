import { ChromaClient, OpenAIEmbeddingFunction } from "chromadb";

const client = new ChromaClient({
  path: "http://localhost:8000",
});

const main = async () => {
    // Create a collection
    const response = await client.createCollection({
      name: "data-test2",
    });
    console.log(response);
  };
  
  if (!process.env.OPENAI_API_KEY) {
    throw new Error("OPENAI_API_KEY is not set");
  }

  const embeddingFunction = new OpenAIEmbeddingFunction({
    openai_api_key: process.env.OPENAI_API_KEY,
    openai_model: "text-embedding-3-small",
  });

  const addData = async () => {
    const collection = await client.getCollection({
      name: "data-test2",
      embeddingFunction: embeddingFunction,
    });
    const result = await collection.add({
      ids: ["id1"],
      documents: ["This is my second entry"],
      // embeddings are mandatory and should be generated by a model
    //   embeddings: [[0.3, 0.4, 0.8]],
    });
    console.log(result);
  };

//   main()
addData();




// 1) create an embeddingFunction using OpenAI's API:
// const embeddingFunction = new OpenAIEmbeddingFunction({
//     openai_api_key: process.env.OPENAI_API_KEY,
//     openai_model: "text-embedding-3-small",
//   });

// 2) You associate this embeddingFunction with your collection:
// const collection = await client.getCollection({
//     name: "data-test2",
//     embeddingFunction: embeddingFunction,
//   });

// 3)When you add data to the collection, you don't provide embeddings manually:
// const result = await collection.add({
//     ids: ["id1"],
//     documents: ["This is my second entry"],
//     // Note: embeddings are not provided here
//   });

// Behind the scenes, the OpenAIEmbeddingFunction automatically sends your document 
// text ("This is my second entry") to OpenAI's API. The API processes this text and
// returns a vector (a list of numbers) that represents the semantic meaning of your
// text. This vector is then used as the embedding for your document in the Chroma database.
// You don't need to handle this process manually - it's all done automatically when you add
// documents to the collection, thanks to the embeddingFunction you've set up.